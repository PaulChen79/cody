// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"cody/config"
	"cody/domain"
	"cody/internal/database"
	"cody/internal/redis"
	"cody/internal/repo/gorm"
	"cody/internal/service"
	gorm2 "gorm.io/gorm"
	"log"
	"sync"
)

// Injectors from wire.go:

func NewRedis() (domain.GoRedis, error) {
	config := NewConfig()
	goRedis := redis.NewGoRedis(config)
	return goRedis, nil
}

func NewRepo() (domain.Repository, error) {
	gormDB, err := NewDB()
	if err != nil {
		return nil, err
	}
	goRedis, err := NewRedis()
	if err != nil {
		return nil, err
	}
	config := NewConfig()
	repository := gorm.NewRepository(gormDB, goRedis, config)
	return repository, nil
}

func NewService() (domain.Service, error) {
	gormDB, err := NewDB()
	if err != nil {
		return nil, err
	}
	goRedis, err := NewRedis()
	if err != nil {
		return nil, err
	}
	config := NewConfig()
	repository := gorm.NewRepository(gormDB, goRedis, config)
	domainService := service.NewService(repository, goRedis, config)
	return domainService, nil
}

// wire.go:

var db *gorm2.DB

var dbOnce sync.Once

func NewDB() (*gorm2.DB, error) {
	var err error
	if db == nil {
		dbOnce.Do(func() {
			log.Println("connect db")
			db, err = database.DatabaseConnection(NewConfig().DB)
			if err != nil {
				return
			}
			log.Println("connect db success")
		})
	}
	return db, err
}

var cg *config.Config

var configOnce sync.Once

func NewConfig() *config.Config {
	configOnce.Do(func() {
		log.Println("read config")
		cg = config.NewConfig()
		log.Println("read config success")
	})
	return cg
}
